
/**
 * 函数02 - 函数的使用03 - 函数直接量
 * 平常定义函数都是通过def关键字 定义出来的具有指定名字的函数 再在需要的地方 通过函数名进行调用 
 * scala也支持函数直接量 不需要通过def 关键字 也不需要函数的名字 而是直接就写出函数的内容
 */
object Demo8 {
  def main(args: Array[String]): Unit = {
    //直接量 - 不需要new 直接写出来的量
    val str = "abc";
    val num = 123;
    val flag = true;
    
    //函数直接量
    //--普通函数的写法
    //def mx(a:Int,b:Int)={a+b}
    def mx(a:Int,b:Int):Int={a+b}
    println(mx(1,2));
    //--函数直接量的写法
    (a:Int,b:Int)=>{a+b}
    //--如果函数直接量的函数体只有一行则大括号可以省略
    (a:Int,b:Int)=>a+b
    //--如果函数参数的类型可以自动推测而知道 则参数类型的声明可以省略不写 -- 这个例子如果省略会报错 因为类型无法推知
    //(a,b)=>a+b
    //--如果函数参数列表中只有一个参数 在不会产生歧义的情况下 小括号可以省略
    (str:String)=>str.toUpperCase();
    str:String=>str.toUpperCase();
    
    //函数直接量的用法
    //函数在scala中是头等公民 - 可以作为类的成员 可以被赋值给引用 可以作为另一个方法的参数被传递 当作方法的返回值被返回 - 功能一点都不必变量/常量少
    //--当函数实现 被赋值给引用 作为另一个方法的参数被传递 作方法的返回值被返回 这几个功能时 通常为了简便 在定义函数时都会使用直接量的方式去定义
    //--其中 将函数直接量 赋值给引用的用法 就是函数的 函数值的用
    //--其中将函数直接量 作为参数传递给另一个函数 或 将其当作另一个函数的返回值的用法 称之为 高阶函数 的用法
  }
}
